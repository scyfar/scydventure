name: release and publish

on:
  push:
    tags:
      - "*"

env:
  ASSET_FILE_NAME_NO_EXT: "Scydventure-${{ github.ref_name }}"
  ASSET_FILE_SINGLEPLAYER_SUFFIX: "_singleplayer"
  ASSET_FILE_ATTESTATION_SUFFIX: "_attestation"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: install Python requirements
        run: pip install -r ./scripts/requirements.txt
      - name: set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      - name: install packwiz
        run: go install github.com/packwiz/packwiz@latest
      - name: build artifact
        run: python ./scripts/_export-mrpack.py "${{ github.ref_name }}" "${{ env.ASSET_FILE_NAME_NO_EXT }}.mrpack"
      - name: build singleplayer artifact
        run: python ./scripts/_client-env-required.py "${{ env.ASSET_FILE_NAME_NO_EXT }}.mrpack" "${{ env.ASSET_FILE_NAME_NO_EXT }}${{ env.ASSET_FILE_SINGLEPLAYER_SUFFIX }}.mrpack"
      - name: attest build provenance
        id: attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |-
            ${{ env.ASSET_FILE_NAME_NO_EXT }}.mrpack
            ${{ env.ASSET_FILE_NAME_NO_EXT }}${{ env.ASSET_FILE_SINGLEPLAYER_SUFFIX }}.mrpack
      - name: zip attestation
        run: |-
          zip ${{ env.ASSET_FILE_NAME_NO_EXT }}${{ env.ASSET_FILE_ATTESTATION_SUFFIX }}.zip ${{ steps.attest.outputs.bundle-path }}
      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-files
          path: |-
            ${{ env.ASSET_FILE_NAME_NO_EXT }}.mrpack
            ${{ env.ASSET_FILE_NAME_NO_EXT }}${{ env.ASSET_FILE_SINGLEPLAYER_SUFFIX }}.mrpack
            ${{ env.ASSET_FILE_NAME_NO_EXT }}${{ env.ASSET_FILE_ATTESTATION_SUFFIX }}.zip
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-files
      - name: create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          draft: ${{ contains(github.ref_name, 'draft') }}
          prerelease: ${{ !contains(github.ref_name, 'draft') && (contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc')) }}
          generate_release_notes: true
          discussion_category_name: Versions
          files: |-
            ${{ env.ASSET_FILE_NAME_NO_EXT }}.mrpack
            ${{ env.ASSET_FILE_NAME_NO_EXT }}${{ env.ASSET_FILE_SINGLEPLAYER_SUFFIX }}.mrpack
            ${{ env.ASSET_FILE_NAME_NO_EXT }}${{ env.ASSET_FILE_ATTESTATION_SUFFIX }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_PAT }}
  publish:
    if: ${{ contains(github.ref_name, 'draft') == false }}
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: extract data from tag
        id: extract
        env:
          TAG_NAME: ${{ github.ref_name }}
        shell: bash
        run: |-
          if [[ "$TAG_NAME" =~ ^([^_]*)_([^_]*)_([^_]*)$ ]]; then
            echo "pack_version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "mc_version=${BASH_REMATCH[2]}" >> $GITHUB_OUTPUT
            echo "loader=${BASH_REMATCH[3]}" >> $GITHUB_OUTPUT
          else
            echo "Invalid Git tag format. Expected exactly two underscores."
            exit 1
          fi
          if [[ "$TAG_NAME" == *"alpha"* ]]; then
            channel="alpha"
          elif [[ "$TAG_NAME" == *"beta"* ]] || [[ "$TAG_NAME" == *"rc"* ]]; then
            channel="beta"
          else
            channel="release"
          fi
          echo "channel=$channel" >> $GITHUB_OUTPUT
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-files
      - name: set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: install Python requirements
        run: pip install -r ./scripts/requirements.txt
      - name: get release notes
        id: release_notes
        run: |-
          release_notes=$(python ./scripts/_extract-changelog.py "${{ github.ref_name }}")
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$release_notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: get dependency information
        id: dependencies
        run: |-
          dependencies=$(python ./scripts/_dependency-information.py "${{ github.ref_name }}")
          echo "dependencies<<EOF" >> $GITHUB_OUTPUT
          echo "$dependencies" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: publish to modrinth
        uses: cloudnode-pro/modrinth-publish@v2
        with:
          token: ${{ secrets.MODRINTH_TOKEN }}
          project: ${{ vars.MODRINTH_PROJECT_ID }}
          name: "${{ steps.extract.outputs.pack_version }} ⏺ ${{ steps.extract.outputs.mc_version }} ⏺ ${{ steps.extract.outputs.loader }}"
          version: ${{ github.ref_name }}
          channel: ${{ steps.extract.outputs.channel }}
          changelog: ${{ steps.release_notes.outputs.release_notes }}
          loaders: >-
            ${{ steps.extract.outputs.loader }}
          game-versions: >-
            ${{ steps.extract.outputs.mc_version }}
          files: |-
            ${{ env.ASSET_FILE_NAME_NO_EXT }}.mrpack
            ${{ env.ASSET_FILE_NAME_NO_EXT }}${{ env.ASSET_FILE_SINGLEPLAYER_SUFFIX }}.mrpack
            ${{ env.ASSET_FILE_NAME_NO_EXT }}${{ env.ASSET_FILE_ATTESTATION_SUFFIX }}.zip
          primary-file: ${{ env.ASSET_FILE_NAME_NO_EXT }}.mrpack
          dependencies: |-
            ${{ steps.dependencies.outputs.dependencies }}
